import streamlit as st
import pandas as pd
import json
from openai import OpenAI
import PyPDF2
import io
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_JUSTIFY, TA_LEFT, TA_CENTER
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# Configuration Streamlit
st.set_page_config(
    page_title="G√©n√©rateur de Personas Marketing",
    page_icon="üéØ",
    layout="wide"
)

# CSS personnalis√©
st.markdown("""
    <style>
    .header {
        background: linear-gradient(135deg, #d32f2f 0%, #b71c1c 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    .cluster-box {
        border-left: 5px solid #d32f2f;
        padding: 15px;
        background-color: #f5f5f5;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    .persona-output {
        background-color: #fafafa;
        padding: 20px;
        border-radius: 10px;
        border: 1px solid #e0e0e0;
    }
    </style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
    <div class="header">
        <h1>üéØ G√©n√©rateur de Personas Marketing</h1>
        <p>G√©n√©rez automatiquement des descriptions de personas pour chaque segment client</p>
    </div>
""", unsafe_allow_html=True)

# Initialiser la session
if "client" not in st.session_state:
    st.session_state.client = None
if "personas" not in st.session_state:
    st.session_state.personas = {}
if "conversation_history" not in st.session_state:
    st.session_state.conversation_history = []
if "produits_bancaires_text" not in st.session_state:
    st.session_state.produits_bancaires_text = None
if "loaded_segments" not in st.session_state:
    st.session_state.loaded_segments = None

# Sidebar - Configuration
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")
    
    # API Key
    api_key = st.text_input("Cl√© API OpenAI", type="password", key="api_key")
    
    if api_key and st.session_state.client is None:
        st.session_state.client = OpenAI(api_key=api_key)
        st.success("‚úÖ Connect√© √† OpenAI !")
    
    st.divider()
    
    # Section Upload PDF
    st.header("üìÑ Catalogue Produits")
    
    uploaded_pdf = st.file_uploader(
        "Charger le PDF des conditions bancaires",
        type=["pdf"],
        help="Uploadez le document des conditions g√©n√©rales de la banque (mis √† jour chaque semestre)"
    )
    
    if uploaded_pdf is not None:
        try:
            # Lire le PDF
            pdf_reader = PyPDF2.PdfReader(io.BytesIO(uploaded_pdf.read()))
            
            # Extraire le texte
            pdf_text = ""
            for page in pdf_reader.pages:
                pdf_text += page.extract_text() + "\n"
            
            st.session_state.produits_bancaires_text = pdf_text
            
            st.success(f"‚úÖ PDF charg√© ! ({len(pdf_reader.pages)} pages)")
            
            # Aper√ßu
            with st.expander("üìÑ Aper√ßu du contenu"):
                st.text(pdf_text[:800] + "...")
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la lecture du PDF: {e}")
    
    elif st.session_state.produits_bancaires_text:
        st.info("‚úÖ Catalogue produits charg√© en m√©moire")
        if st.button("üóëÔ∏è Supprimer le catalogue"):
            st.session_state.produits_bancaires_text = None
            st.rerun()
    else:
        st.warning("‚ö†Ô∏è Aucun catalogue charg√©")
        st.caption("Les personas seront g√©n√©r√©s sans recommandations de produits sp√©cifiques")
    
    st.divider()
    
    # Options
    st.header("üìä Options")
    
    model_choice = st.selectbox(
        "Mod√®le OpenAI",
        ["gpt-4o-mini", "gpt-4o", "gpt-3.5-turbo"],
        index=0
    )
    
    st.divider()
    st.info("üí° Configurez votre cl√© API OpenAI et chargez le catalogue produits pour commencer")

# Donn√©es des segments par d√©faut
segments_data = [
    {
        "id": 0,
        "name": "Les clients fid√®les et hyper-connect√©s",
        "age": 40,
        "nbProducts": 8,
        "revenueHommes": "100 000 - 200 000 FCFA",
        "revenueFemmes": "100 000 - 200 000 FCFA",
        "mobileAccess": "99%",
        "emailAccess": "85%",
        "characteristics": "Maturit√© professionnelle, clients de base stable"
    },
    {
        "id": 1,
        "name": "Les racines de confiance",
        "age": 62,
        "nbProducts": 8,
        "revenueHommes": "200 000 - 300 000 FCFA",
        "revenueFemmes": "0 - 100 000 FCFA",
        "mobileAccess": "97%",
        "emailAccess": "57%",
        "characteristics": "Anciens fonctionnaires, revenus constants"
    },
    {
        "id": 2,
        "name": "Les ambassadeurs de demain",
        "age": 36,
        "nbProducts": 3,
        "revenueHommes": "0 - 100 000 FCFA",
        "revenueFemmes": "0 - 100 000 FCFA",
        "mobileAccess": "98%",
        "emailAccess": "60%",
        "characteristics": "En transition professionnelle, hyper-connect√©s"
    },
    {
        "id": 3,
        "name": "Les champions fonctionnaires",
        "age": 44,
        "nbProducts": 14,
        "revenueHommes": "300 000 - 400 000 FCFA",
        "revenueFemmes": "0 - 100 000 FCFA",
        "mobileAccess": "99%",
        "emailAccess": "88%",
        "characteristics": "Plus grands utilisateurs, hyper-consommateurs"
    },
    {
        "id": 4,
        "name": "Les fid√®les discrets",
        "age": 41,
        "nbProducts": 3,
        "revenueHommes": "0 - 100 000 FCFA",
        "revenueFemmes": "0 - 100 000 FCFA",
        "mobileAccess": "98%",
        "emailAccess": "N/A",
        "characteristics": "Employ√©s stables, utilisation minimale"
    }
]

def create_prompt(segment):
    base_info = f"""G√©n√®re une description compl√®te et d√©taill√©e d'une persona marketing pour un segment bancaire avec les caract√©ristiques suivantes:

Nom du segment: {segment.get('name', 'N/A')}
√Çge moyen: {segment.get('age', 'N/A')} ans
Nombre de produits utilis√©s: {segment.get('nbProducts', 'N/A')}
Revenu mensuel (Hommes): {segment.get('revenueHommes', 'N/A')}
Revenu mensuel (Femmes): {segment.get('revenueFemmes', 'N/A')}
Accessibilit√© mobile: {segment.get('mobileAccess', 'N/A')}
Accessibilit√© email: {segment.get('emailAccess', 'N/A')}
Caract√©ristiques principales: {segment.get('characteristics', 'N/A')}"""

    if st.session_state.produits_bancaires_text:
        produits_info = f"""

CATALOGUE DES PRODUITS BANCAIRES DISPONIBLES:
{st.session_state.produits_bancaires_text[:8000]}

IMPORTANT: Utilise ce catalogue pour recommander des produits SP√âCIFIQUES avec leurs TARIFS EXACTS du catalogue."""
    else:
        produits_info = "\n\nNote: Aucun catalogue produits charg√©. Fais des recommandations g√©n√©rales sans tarifs sp√©cifiques."
    
    prompt = base_info + produits_info + """

Fournis une description professionnelle en fran√ßais incluant:
- Profil d√©mographique d√©taill√© (avec diff√©rences possibles entre hommes et femmes)
- Comportements d'achat et patterns de consommation
- Besoins et pr√©f√©rences sp√©cifiques
- Motivations et douleurs (pain points)
- Strat√©gie marketing recommand√©e
- Canaux de communication pr√©f√©r√©s
- Proposition de valeur unique
- RECOMMANDATIONS DE PRODUITS BANCAIRES ADAPT√âS avec les tarifs exacts du catalogue (si disponible)
- Cr√©e un package produit en enumerant les elements de ce package en , si possible

Format: Utilise des sections claires avec des titres en gras."""
    
    return prompt

def generate_persona_pdf(persona_id, persona_content, segment_name):
    """
    G√©n√®re un PDF format√© pour un persona
    """
    buffer = io.BytesIO()
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Styles
    styles = getSampleStyleSheet()
    
    # Style personnalis√© pour le titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor='#d32f2f',
        spaceAfter=30,
        alignment=TA_CENTER
    )
    
    # Style pour les sous-titres
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        textColor='#b71c1c',
        spaceAfter=12,
        spaceBefore=12
    )
    
    # Style pour le texte normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        alignment=TA_JUSTIFY,
        spaceAfter=10
    )
    
    # Contenu du PDF
    story = []
    
    # Titre
    story.append(Paragraph(f"PERSONA MARKETING", title_style))
    story.append(Paragraph(f"Cluster {persona_id}: {segment_name}", heading_style))
    story.append(Spacer(1, 0.5*cm))
    
    # Convertir le contenu markdown en paragraphes PDF
    lines = persona_content.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            story.append(Spacer(1, 0.3*cm))
            continue
        
        # D√©tection des titres (lignes avec **)
        if line.startswith('**') and line.endswith('**'):
            title_text = line.replace('**', '')
            story.append(Paragraph(title_text, heading_style))
        elif line.startswith('###'):
            title_text = line.replace('###', '').strip()
            story.append(Paragraph(title_text, heading_style))
        elif line.startswith('##'):
            title_text = line.replace('##', '').strip()
            story.append(Paragraph(title_text, heading_style))
        elif line.startswith('#'):
            title_text = line.replace('#', '').strip()
            story.append(Paragraph(title_text, heading_style))
        elif line.startswith('- ') or line.startswith('‚Ä¢ '):
            # Liste √† puces
            text = line[2:].strip()
            story.append(Paragraph(f"‚Ä¢ {text}", normal_style))
        else:
            # Texte normal - nettoyer le markdown basique
            text = line.replace('**', '')
            if text:
                story.append(Paragraph(text, normal_style))
    
    # Footer
    story.append(Spacer(1, 1*cm))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=9,
        textColor='gray',
        alignment=TA_CENTER
    )
    story.append(Paragraph("G√©n√©r√© par le G√©n√©rateur de Personas Marketing - Soci√©t√© G√©n√©rale C√¥te d'Ivoire", footer_style))
    
    # G√©n√©rer le PDF
    doc.build(story)
    
    buffer.seek(0)
    return buffer

def generate_persona(segment, model):
    """
    G√©n√®re un persona avec OpenAI
    """
    if st.session_state.client is None:
        st.error("‚ùå Veuillez d'abord configurer votre cl√© API OpenAI dans la barre lat√©rale.")
        return None
    
    prompt = create_prompt(segment)
    
    try:
        message = st.session_state.client.chat.completions.create(
            model=model,
            max_tokens=2500,
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        
        st.session_state.personas[segment.get("id", 0)] = message.choices[0].message.content
        return message.choices[0].message.content
    
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return None
    if st.session_state.client is None:
        st.error("‚ùå Veuillez d'abord configurer votre cl√© API OpenAI dans la barre lat√©rale.")
        return None
    
    prompt = create_prompt(segment)
    
    try:
        message = st.session_state.client.chat.completions.create(
            model=model,
            max_tokens=2500,
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        
        st.session_state.personas[segment.get("id", 0)] = message.choices[0].message.content
        return message.choices[0].message.content
    
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return None

# Onglets principaux
tab1, tab2, tab3 = st.tabs(["üìã Segments", "üéØ G√©n√©rer Personas", "üí¨ Chat Intelligent"])

# TAB 1 - SEGMENTS
with tab1:
    st.subheader("Segments Clients Disponibles")
    
    data_source = st.radio(
        "Source de donn√©es",
        ["Donn√©es par d√©faut", "Charger un CSV personnalis√©"],
        index=0
    )
    
    if data_source == "Charger un CSV personnalis√©":
        st.divider()
        st.subheader("üì§ Charger vos propres donn√©es")
        uploaded_file = st.file_uploader("Chargez un fichier CSV avec vos segments", type="csv")
        
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
            st.session_state.loaded_segments = df.to_dict('records')
            st.dataframe(df, use_container_width=True)
            st.success("‚úÖ Fichier charg√© avec succ√®s!")
            current_segments = st.session_state.loaded_segments
        else:
            st.info("üí° Veuillez charger un fichier CSV pour continuer")
            current_segments = []
    else:
        current_segments = segments_data
    
    if current_segments:
        st.divider()
        st.subheader("Segments √† traiter")
        cols = st.columns(2)
        for idx, segment in enumerate(current_segments):
            with cols[idx % 2]:
                st.markdown(f"""
                <div class="cluster-box">
                    <h4>CLUSTER {segment.get('id', idx)}: {segment.get('name', 'Sans nom')}</h4>
                    <p><b>√Çge moyen:</b> {segment.get('age', 'N/A')} ans</p>
                    <p><b>Produits:</b> {segment.get('nbProducts', 'N/A')}</p>
                    <p><b>Revenu Hommes:</b> {segment.get('revenueHommes', 'N/A')}</p>
                    <p><b>Revenu Femmes:</b> {segment.get('revenueFemmes', 'N/A')}</p>
                    <p><b>Acc√®s Mobile:</b> {segment.get('mobileAccess', 'N/A')}</p>
                    <p><b>Acc√®s Email:</b> {segment.get('emailAccess', 'N/A')}</p>
                </div>
                """, unsafe_allow_html=True)

# TAB 2 - G√âN√âRATION
with tab2:
    st.subheader("üéØ G√©n√©rer des Personas")
    
    if "loaded_segments" in st.session_state and st.session_state.loaded_segments:
        segments_to_use = st.session_state.loaded_segments
    else:
        segments_to_use = segments_data
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.write("**Segments disponibles:**")
        selected_segments = st.multiselect(
            "S√©lectionnez les segments √† traiter",
            options=[(s.get("id", idx), s.get("name", f"Segment {idx}")) for idx, s in enumerate(segments_to_use)],
            format_func=lambda x: f"Cluster {x[0]}: {x[1][:30]}...",
            default=[(segments_to_use[0].get("id", 0), segments_to_use[0].get("name", "Segment 0"))]
        )
        
        if st.button("üöÄ G√©n√©rer les Personas", type="primary"):
            if not selected_segments:
                st.warning("‚ö†Ô∏è S√©lectionnez au moins un segment")
            else:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for idx, (seg_id, _) in enumerate(selected_segments):
                    segment = next((s for s in segments_to_use if s.get("id", -1) == seg_id), None)
                    if segment:
                        status_text.text(f"G√©n√©ration du Cluster {seg_id}...")
                        
                        generate_persona(segment, model_choice)
                        
                        progress_bar.progress((idx + 1) / len(selected_segments))
                
                st.success("‚úÖ Tous les personas ont √©t√© g√©n√©r√©s!")
    
    with col2:
        if st.session_state.personas:
            st.write("**Personas g√©n√©r√©s:**")
            
            persona_options = [
                f"Cluster {k}: {next((s.get('name', 'Unknown') for s in segments_to_use if s.get('id', -1) == k), 'Unknown')[:40]}..."
                for k in sorted(st.session_state.personas.keys())
            ]
            
            selected_persona = st.selectbox("Afficher le persona de:", persona_options)
            
            if selected_persona:
                persona_id = int(selected_persona.split(":")[0].replace("Cluster ", ""))
                
                st.markdown("---")
                st.markdown('<div class="persona-output">', unsafe_allow_html=True)
                st.markdown(st.session_state.personas[persona_id])
                st.markdown('</div>', unsafe_allow_html=True)
                
                col_a, col_b = st.columns(2)
                
                with col_a:
                    st.download_button(
                        label="üì• T√©l√©charger en TXT",
                        data=st.session_state.personas[persona_id],
                        file_name=f"persona_cluster_{persona_id}.txt",
                        mime="text/plain"
                    )
                
                with col_b:
                    segment_name = next((s.get("name", "Unknown") for s in segments_to_use if s.get("id", -1) == persona_id), "Unknown")
                    
                    # G√©n√©rer le PDF
                    pdf_buffer = generate_persona_pdf(persona_id, st.session_state.personas[persona_id], segment_name)
                    
                    st.download_button(
                        label="üì• T√©l√©charger en PDF",
                        data=pdf_buffer,
                        file_name=f"persona_cluster_{persona_id}.pdf",
                        mime="application/pdf"
                    )
        else:
            st.info("üí° G√©n√©rez des personas pour les voir ici")

# TAB 3 - CHAT
with tab3:
    st.subheader("üí¨ Assistant Intelligent pour Personas")
    
    if st.session_state.client is None:
        st.warning("‚ö†Ô∏è Veuillez configurer votre cl√© API OpenAI d'abord.")
    else:
        if "loaded_segments" in st.session_state and st.session_state.loaded_segments:
            segments_for_chat = st.session_state.loaded_segments
        else:
            segments_for_chat = segments_data
        
        st.write("**Personas g√©n√©r√©s disponibles:**")
        if st.session_state.personas:
            for persona_id, content in st.session_state.personas.items():
                segment_name = next((s.get("name", "Unknown") for s in segments_for_chat if s.get("id", -1) == persona_id), "Unknown")
                st.info(f"‚úÖ Cluster {persona_id}: {segment_name}")
        else:
            st.warning("‚ö†Ô∏è Aucun persona g√©n√©r√©. G√©n√©rez d'abord des personas dans l'onglet 'G√©n√©rer Personas'")
        
        st.divider()
        st.write("Posez des questions sur les personas, les segments ou demandez des recommandations marketing.")
        
        for message in st.session_state.conversation_history:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        user_input = st.chat_input("Posez votre question...")
        
        if user_input:
            st.session_state.conversation_history.append({
                "role": "user",
                "content": user_input
            })
            
            with st.chat_message("user"):
                st.markdown(user_input)
            
            try:
                personas_context = "PERSONAS G√âN√âR√âS:\n"
                if st.session_state.personas:
                    for persona_id, content in st.session_state.personas.items():
                        segment_name = next((s.get("name", "Unknown") for s in segments_for_chat if s.get("id", -1) == persona_id), "Unknown")
                        personas_context += f"\n--- Cluster {persona_id}: {segment_name} ---\n{content[:2000]}...\n"
                else:
                    personas_context += "Aucun persona g√©n√©r√©."
                
                segments_context = "\n\nSEGMENTS:\n"
                for segment in segments_for_chat:
                    segments_context += f"- ID: {segment.get('id')}, Nom: {segment.get('name')}, √Çge: {segment.get('age')}, "
                    segments_context += f"Produits: {segment.get('nbProducts')}, Revenu H: {segment.get('revenueHommes')}, Revenu F: {segment.get('revenueFemmes')}\n"
                
                if st.session_state.produits_bancaires_text:
                    produits_context = f"\n\nCATALOGUE PRODUITS:\n{st.session_state.produits_bancaires_text[:8000]}"
                else:
                    produits_context = "\n\nNote: Aucun catalogue produits charg√©."
                
                system_prompt = f"""Tu es un expert en marketing bancaire et segmentation client de Soci√©t√© G√©n√©rale C√¥te d'Ivoire.

{personas_context}
{segments_context}
{produits_context}

Utilise ces informations pour r√©pondre aux questions. Recommande des produits sp√©cifiques avec tarifs quand le catalogue est disponible."""
                
                messages_with_system = [
                    {"role": "system", "content": system_prompt}
                ] + st.session_state.conversation_history
                
                response = st.session_state.client.chat.completions.create(
                    model=model_choice,
                    max_tokens=2000,
                    messages=messages_with_system
                )
                
                assistant_message = response.choices[0].message.content
                st.session_state.conversation_history.append({
                    "role": "assistant",
                    "content": assistant_message
                })
                
                with st.chat_message("assistant"):
                    st.markdown(assistant_message)
            
            except Exception as e:
                st.error(f"‚ùå Erreur: {e}")